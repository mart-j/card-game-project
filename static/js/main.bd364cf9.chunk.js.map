{"version":3,"sources":["components/difficulty/Difficulty.module.scss","components/grid/DrawGrid.tsx","components/difficulty/DifficultyButtons.tsx","components/difficulty/Difficulty.tsx","components/timer/Timer.tsx","components/timer/BestTime.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/grid/DrawGrid.module.scss","App.module.scss","components/timer/Times.module.scss"],"names":["module","exports","DrawGrid","revealCard","setGrid","grid","difficulty","useEffect","generateGridSize","newArr","i","odd","index","image","opened","revealed","shuffeledCards","filter","card","map","sort","Math","random","className","styles","container","easy","medium","hard","onClick","inside","src","alt","DifficultyButtons","Difficulty","setIsGameActive","setDicciculty","buttonWrapper","button","toString","restartButton","Timer","isGameActive","setTime","time","useState","seconds","setSeconds","minutes","setMinutes","setTimeout","slice","timer","BestTime","captureScore","initialRender","useRef","current","checkBest","localStorage","getItem","setItem","timeWrapper","toast","configure","App","cardIndex","setCardIndex","findRobot","setFindRobot","setCaptureScore","onGameReset","heading","timeContainer","newCardIndex","newGrid","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd364cf9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Difficulty_buttonWrapper__3VcUd\",\"button\":\"Difficulty_button__qRM3e\",\"restartButton\":\"Difficulty_restartButton__fAOsM\"};","/* eslint-disable no-nested-ternary */\n/* eslint-disable @typescript-eslint/indent */\nimport React, { Dispatch, FC, SetStateAction, useEffect } from 'react';\n\nimport styles from './DrawGrid.module.scss';\n\ntype Card = {\n  odd: boolean;\n  index: number;\n  image: string;\n  opened: boolean;\n  revealed: boolean;\n};\n\ninterface Props {\n  difficulty: number;\n  grid: Card[];\n  setGrid: Dispatch<SetStateAction<Card[]>>;\n  revealCard: (i: number) => void;\n}\n\nconst DrawGrid: FC<Props> = ({ revealCard, setGrid, grid, difficulty }) => {\n  const cardImage = 'https://sourcemaking.com/files/v2/content/home-tb1.png';\n \n  useEffect(() => {\n    \n    generateGridSize();\n  }, [difficulty]);\n\n  const generateGridSize = () => {\n    let newArr: Card[] = [];\n    for (let i = 0; i < difficulty; i++) {\n      newArr = [\n        ...newArr,\n        {\n          odd: i % 2 === 0 && true,\n          index: i,\n          image: '',\n          opened: false,\n          revealed: false,\n        },\n      ];\n    }\n\n    const evenCards = () => {\n      return newArr\n        .filter((card) => !card.odd)\n        .map((card, i) => {\n          card.image = `https://robohash.org/${i}?size=100x100`;\n          card.index = i;\n          return card;\n        });\n    };\n    const oddCards = () => {\n      return newArr\n        .filter((card) => card.odd)\n        .map((card, i) => {\n          card.image = `https://robohash.org/${i}?size=100x100`;\n          card.index = i;\n          return card;\n        });\n    };\n\n    const shuffeledCards = [...evenCards(), ...oddCards()].sort(\n      () => Math.random() - 0.5,\n    );\n\n    setGrid(shuffeledCards);\n  };\n\n  return (\n    <div className={styles.container}>\n      {grid.map(({ opened, image }, i) => {\n        return (\n          <>\n            <div\n              className={\n                difficulty === 16\n                  ? styles.easy\n                  : difficulty === 36\n                  ? styles.medium\n                  : styles.hard\n              }\n              onClick={() => revealCard(i)}\n            >\n              <div className={styles.inside}>\n                <img src={`${opened ? image : cardImage}`} alt=\"robot\" />\n              </div>\n            </div>\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DrawGrid;\n","export const DifficultyButtons = ['easy', 'medium', 'hard'];\n","import React, { Dispatch, FC, SetStateAction } from 'react';\nimport { DifficultyButtons } from './DifficultyButtons';\nimport styles from './Difficulty.module.scss';\n\ninterface Props {\n  setDicciculty: React.Dispatch<React.SetStateAction<number>>;\n  difficulty: number;\n  setIsGameActive: Dispatch<SetStateAction<boolean>>;\n}\n// @ts-ignore\nconst Difficulty: FC<Props> = ({\n  setIsGameActive,\n  difficulty,\n  setDicciculty,\n}) => {\n  const difficultyButtonHandler = (index: number) => {\n    if (index === 0) {\n      setDicciculty(16);\n    } else if (index === 1) {\n      setDicciculty(36);\n    } else if (index === 2) {\n      setDicciculty(100);\n    }\n  };\n\n  const resetDifficulty = () => {\n    setDicciculty(0);\n    setIsGameActive(false);\n  };\n\n  return (\n    <div className={styles.buttonWrapper}>\n      {difficulty === 0 ? (\n        DifficultyButtons.map((button, i) => {\n          return (\n            <button\n              className={styles.button}\n              onClick={() => difficultyButtonHandler(i)}\n              key={i.toString()}\n            >\n              {button}\n            </button>\n          );\n        })\n      ) : (\n        <button className={styles.restartButton} onClick={resetDifficulty}>\n          Restart Game\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Difficulty;\n","import React, { FC, useEffect, useState } from 'react';\nimport styles from './Times.module.scss';\n\ninterface Props {\n  time: string | undefined;\n  setTime: React.Dispatch<React.SetStateAction<string | undefined>>;\n  difficulty: number;\n  isGameActive: boolean;\n}\n\nconst Timer: FC<Props> = ({ isGameActive, difficulty, setTime, time }) => {\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n\n  const countTime = () => {\n    if (seconds < 60) {\n      seconds < 60 && setTimeout(() => setSeconds(seconds + 1), 1000);\n    } else {\n      setSeconds(0);\n      setMinutes(minutes + 1);\n    }\n  };\n\n  useEffect(() => {\n    if (isGameActive) {\n      countTime();\n    } else {\n      setSeconds(0);\n      setMinutes(0);\n    }\n\n    setTime(`${`0${minutes}`.slice(-2)}:${`0${seconds}`.slice(-2)}`);\n  }, [isGameActive, seconds]);\n\n  return <h3 className={styles.timer}>{time}</h3>;\n};\n\nexport default Timer;\n","import React, { FC, useEffect, useRef } from 'react';\nimport styles from './Times.module.scss';\n\ninterface Props {\n  captureScore: string | undefined;\n  difficulty: number;\n}\n\nconst BestTime: FC<Props> = ({ difficulty, captureScore }) => {\n  const initialRender = useRef(true);\n\n  useEffect(() => {\n    if (initialRender.current) {\n      initialRender.current = false;\n    } else {\n      checkBest();\n    }\n  }, [captureScore]);\n\n  const checkBest = () => {\n    const condition =\n      localStorage.getItem('captureScore')! <\n        localStorage.getItem('bestScore')! ||\n      localStorage.getItem('bestScore') === null;\n\n    if (condition) {\n      if (difficulty === 16) {\n        localStorage.setItem(\n          'bestScore',\n          localStorage.getItem('captureScore')!,\n        );\n      } else if (difficulty === 36) {\n        localStorage.setItem(\n          'bestScoreMedium',\n          localStorage.getItem('captureScore')!,\n        );\n      } else if ((difficulty === 100)) {\n        localStorage.setItem(\n          'bestScoreHard',\n          localStorage.getItem('captureScore')!,\n        );\n      }\n    }\n  };\n\n  return (\n    <div className={styles.timeWrapper}>\n   \n      <div>Best Scores</div>\n      <div>{localStorage.getItem('bestScore')!}: Easy</div>\n      <div>{localStorage.getItem('bestScoreMedium')!}: Hard</div>\n      <div>{localStorage.getItem('bestScoreHard')!}: Medium</div>\n    </div>\n  );\n};\n\nexport default BestTime;\n","import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport styles from './App.module.scss';\nimport DrawGrid from './components/grid/DrawGrid';\nimport Difficulty from './components/difficulty/Difficulty';\nimport Timer from './components/timer/Timer';\nimport BestTime from './components/timer/BestTime';\nimport 'react-toastify/scss/main.scss';\n\ntoast.configure();\n\ntype Card = {\n  odd: boolean;\n  index: number;\n  image: string;\n  opened: boolean;\n  revealed: boolean;\n};\n\nconst App = () => {\n  const [difficulty, setDicciculty] = useState(0);\n  const [grid, setGrid] = useState<Card[]>([]);\n  const [cardIndex, setCardIndex] = useState<number[]>([]);\n  const [findRobot, setFindRobot] = useState<number[]>([]);\n  const [time, setTime] = useState<string | undefined>();\n  const [isGameActive, setIsGameActive] = useState(false);\n  const [captureScore, setCaptureScore] = useState<string | undefined>();\n\n  useEffect(() => {\n    !isGameActive && onGameReset();\n  }, [isGameActive]);\n\n  const onGameReset = () => {\n    setFindRobot([]);\n    setGrid([]);\n    setCardIndex([]);\n    setDicciculty(0);\n  };\n\n  const revealCard = (i: number) => {\n    setIsGameActive(true);\n    let newArr = [...findRobot];\n    let newCardIndex = [...cardIndex];\n    const newGrid = [...grid];\n    newGrid[i].opened = true;\n    setGrid(newGrid);\n\n    if (!newGrid[i].revealed) {\n      if (newArr.length > 0) {\n        newArr = [];\n        newCardIndex = [];\n        setFindRobot([...newArr]);\n        setCardIndex([...newCardIndex]);\n\n        newArr = [...findRobot, grid[i].index];\n        newCardIndex = [...cardIndex, i];\n      } else {\n        newArr = [...findRobot, grid[i].index];\n        newCardIndex = [...cardIndex, i];\n        setFindRobot([...newArr]);\n        setCardIndex([...newCardIndex]);\n      }\n      if (i === cardIndex[0] && !grid[i].revealed) {\n        newGrid[i].opened = false;\n      } else if (newArr[0] === newArr[1]) {\n        newGrid[cardIndex[0]].revealed = true;\n        newGrid[i].revealed = true;\n\n        setGrid([...newGrid]);\n        setTimeout(() => {\n          const all = grid.filter((card) => card.opened === true);\n          if (all.length === grid.length) {\n            toast('Congratulations You won!');\n            localStorage.setItem('captureScore', time!);\n            setCaptureScore(time);\n\n            setIsGameActive(false);\n          } else {\n            toast('Pair was found!');\n          }\n        }, 500);\n      } else if (newArr.length === 2) {\n        setTimeout(() => {\n          newGrid[cardIndex[0]].opened = false;\n          newGrid[i].opened = false;\n          setGrid([...newGrid]);\n        }, 1000);\n      }\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.heading}>Memory Game</h1>\n      <div className={styles.timeContainer}>\n      <div className={styles.timeWrapper}>\n        <Timer\n          time={time}\n          setTime={setTime}\n          isGameActive={isGameActive}\n          difficulty={difficulty}\n        />\n        <BestTime difficulty={difficulty} captureScore={captureScore} />\n      </div>\n      </div>\n      <Difficulty\n        setIsGameActive={setIsGameActive}\n        difficulty={difficulty}\n        setDicciculty={setDicciculty}\n      />\n\n      <DrawGrid\n        revealCard={revealCard}\n        grid={grid}\n        setGrid={setGrid}\n        difficulty={difficulty}\n      />\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DrawGrid_container__3SJF-\",\"inside\":\"DrawGrid_inside__2EEqz\",\"easy\":\"DrawGrid_easy__3MtmC\",\"medium\":\"DrawGrid_medium__2HrIR\",\"hard\":\"DrawGrid_hard__rxi2A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeContainer\":\"App_timeContainer__3mg1W\",\"timeWrapper\":\"App_timeWrapper__2cLn_\",\"heading\":\"App_heading__2UL9e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeWrapper\":\"Times_timeWrapper__5Ka4b\",\"timer\":\"Times_timer__2e0Wm\"};"],"sourceRoot":""}